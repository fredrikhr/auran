//
// browser.gs
//
//  Copyright (C) 2002-2003 Auran Developments Pty Ltd
//  All Rights Reserved.
//

include "gs.gs"
include "asset.gs"
include "interface.gs"
include "Library.gs"
include "World.gs"


//! A HTML browser window.  This is %Trainz's mini-browser.
//
// A Browser object is created to display a window of HTML text on screen.  With <bi TRS2004>, the
// ability to display multiple browsers is supported.  To create a new Browser, use the
// Constructors::NewBrowser() method.  Than use one of the loading methods such as LoadHTMLString()
// in this class to get the Browser object to display a HTML page.
//
// Keep in mind that this is a simple browser that supports a very limited amount of basic HTML tags
// and is not a fully functional complete browser that can do everything.  No extra fancy web 
// browser features like JavaScript, Java, Flash etc. are supported by this class or %Trainz.
//
// Messages that are generated by a Browser object are:
// {[ Major             | Minor       | Source         | Destination  ]
//  [ "Browser-URL"     | URL         | Browser        | Browser    ]
//  [ "Browser"         | "Closed"    | Browser        | Browser    ]
//  [ "Browser"         | "Resize"    | Browser        | Browser    ]
//  [ "Browser"         | button-id   | Browser        | Browser    ]}
//
// When a URL in the HTML code displayed by a browser is clicked, a message with a <l Message::major  major>
// type of <m"Browser-URL"> is broadcasted with the <l Message::minor  minor> type being the URL
// clicked on.  A URL is defined by using the <n &lt;a href="URL"&lt;> tag and must be in the form
// of <n "live://&lt;link name&gt;"> where <n &lt;link name&gt;> is the name of link.  The message
// minor type will include the full URL with the <n "live://"> prefix.
//
// Note:
//     When intercepting a browser message in a wait() loop construct, make sure that you clear out
//     the source field of your message variable before continuing, otherwise your message will
//     continue to reference the browser which caused the message, and other scripts will be unable
//     to close it.
//
// It is worth noting that there is a special type of URL for the properties used by PropertyObject.
// A property URL must be in the format of <n "live://property/&lt;propertyname&gt;"> where
// <n &lt;propertyname&gt;> is the name of the property that the URL refers to.  Property links
// allow property values to be clickable and thus edited by the user.  See the 
// PropertyObject::GetDescriptionHTML() method for further details.
//
// Note:
//     The <n "live://"> prefix to the URL string <bi MUST> be used if the link is to be able to
//     have a <m"Browser-URL"> message generated when clicked on.  This is a proprietary %Trainz
//     URL format and not part of standard HTML.
//
// When the user closes the browser window by either clicking on the close button or pressing the
// <b Esc> key, a message with a major type of <m"Browser-Closed"> message is broadcasted.  Usually,
// the Browser object would be reset to null so the browser window on the screen will disappear.
//
// In the method descriptions for this class, you will see pixel coordinates are commonly referred
// to.  Pixel coordinates operate on a 2D (x, y) Cartesian coordinate system where (0,0) is the top
// left corner of the display and (x resolution - 1, y resolution - 1) is the bottom right corner.
//
// See Also:
//     BrowserInterface, GameObject, Interface, Menu, StringTable, Constructors::NewBrowser(),
//     GenericIndustry::ViewDetails(), PropertyObject::GetDescriptionHTML(),
//     <l html  Mini-browser HTML Reference>
//
final game class Browser isclass GameObject
{
  // Possibe browser frame styles, for passing to SetWindowStyle
  public define int STYLE_NO_FRAME    = 0;  // Browser without frame (i.e. not in a bordered window)
  public define int STYLE_DEFAULT     = 1;  // Default browser style to match the current UI module
  public define int STYLE_TOOLTIP     = 2;  // Special tooltip style browser, frameless and non-interactive
  public define int STYLE_HUD_FRAME   = 3;  // Browser for use as a Driver HUD, frame will match other HUDs
  public define int STYLE_SLIM_FRAME  = 4;  // Similar to default but with a slimmer/lighter frame, no buttons or window title
  public define int STYLE_POPOVER     = 5;  // iPad specific "popover", not supported on all platforms


  // Browser window button overlays, used for SetButtonOverlayStyle
  //
  // Modern: Player clicks on these buttons will generate a
  // "Browser" message posted to this Browser object with the the
  // 'minor' string noted beside the button definition.
  //
  // Legacy: Player clicks on these buttons will generate a
  // "Browser-Button" broadcast with the 'minor' string noted beside
  // the button definition, minus the "button-" prefix.
  //
  // In TANE SP2 and below, only the legacy messages are posted. In
  // TANE SP3 or TRS19 compatiblity mode (default), BOTH messages
  // are posted. In TRS19 native modes (or in future builds) only
  // the 'modern' messages are posted.
  //
  // Disabled buttons generate no messages.
  //
  public define int BS_None             = 0;    // No button
  public define int BS_Left             = 1;    // Left arrow button (minor = "button-left-arrow")
  public define int BS_LeftDisabled     = 2;    // Disabled left arrow
  public define int BS_Right            = 3;    // Right arrow (minor = "button-right-arrow")
  public define int BS_RightDisabled    = 4;    // Disabled right arrow
  public define int BS_OK               = 5;    // OK button (tick) (minor = "button-ok")
  public define int BS_OKDisabled       = 6;    // Disabled OK
  public define int BS_Cancel           = 7;    // Cancel (cross) (minor = "button-cancel")

  // Browser window priorites, for SetWindowPriority
  public define int BP_Lowest           = 0;    // Lowest priority, below the HUD elements
  public define int BP_HUD              = 1;    // HUD layer priority, use for HUD panels
  public define int BP_Window           = 2;    // Window layer priority, use for normal windows


  //! Sets the specified parameter to the given value.
  //
  // The parameter specified by <i paramID>, which is identified in HTML code by 
  // <n "$&lt;paramID&gt;">, will be substituted with <i str> in the HTML code.
  // This works the same way as a parameter in a StringTable string does.
  //
  // Param:  paramID  Number of the parameter to substitute.
  // Param:  str      String to substitute when the parameter specified by <i paramID> is found in
  //                  HTML code.
  //
  public native void SetParam(int paramID, string str);


  //! Deprecated, use LoadHTMLString(Asset,string) instead.
  public /*obsolete*/ native void LoadHTMLString(string htmlData);

  //! Loads HTML code into the browser from the given string.
  //
  // Loads images and other relative links relative to the specified asset's directory.
  //
  // Param:  asset     Asset where images and other links can be found.
  // Param:  htmlData  String containing HTML code.
  //
  public native void LoadHTMLString(Asset asset, string htmlData);

  //! Loads HTML code into the browser from a file.
  //
  // Param:  asset         Asset where images and other links can be found.
  // Param:  relativePath  Name of the HTML file to load.
  //
  public native void LoadHTMLFile(Asset asset, string relativePath);


  //! Returns the Asset from which this browser is loading local images and links.
  //
  // Note: 
  //     The Asset may be null, and will match the Asset passed into LoadHTMLString() or LoadHTMLFile().
  //    
  //
  public native Asset GetAsset(void);
  
  
  // ============================================================================
  // Name: CloseWindow
  // Desc: Immediately close this browser. The browser is automatically closed
  //       if all script references are released, but can be forcibly closed
  //       earlier using this function if desired.
  // ============================================================================
  public native void CloseWindow(void);



  //! Enables/disables the closing of this browser window.
  //
  // Preventing the use from being able to close the browser can be used to keep the browser visible
  // and to make sure they actually read the instructions or are confronted with their mistakes.
  //
  // Param:  enabled  Flag indicating whether to enable closing of this browser (true) or disable 
  //                  (false).
  //
  public native void SetCloseEnabled(bool enabled);

  //! Enables/disables the scrolling of this browser window.
  //
  // When scrolling is disabled, no scrollbars will appear on the window, even if the HTML content 
  // does not all fit.
  //
  // Note:
  //    SetWindowStyle() modifies this setting.
  //
  public native void SetScrollEnabled(bool enabled);


  //! Sets the style of window used by this browser (either with or without a frame). This may also
  //  change some other settings on the window to defaults appropriate to the chosen style, so you
  //  should call this function prior to setting other attributes.
  //
  // Param:  style  Style to set the browser to.  See the \ref windowStyle "Browser Window Styles"
  //                section for details.
  //
  // See Also:
  //     \ref windowStyle "Browser Window Styles"
  //
  public native void SetWindowStyle(int style);


  //! Alters the priority layer of this window. You shouldn't normally need to call this.
  //
  // Param:  layerPriority  The window priority to set (BP_*)
  //
  // Note: Window styles imply priority, if customising priority be
  //       sure to call this after SetWindowStyle()
  //
  public native void SetWindowPriority(int layerPriority);


  //! Sets the style of the button overlay for the window frame.
  //
  // The button overlay is drawn over the top of the window frame and content. Clicks
  // on the buttons will result in the script messages as detailed on the button definitions
  // at the beginning of this class.
  //
  // Param:  style  Style to set the browser to.  See the \ref windowStyle "Browser Window Styles"
  //                section for details.
  //
  public native void SetButtonOverlayStyle(int button1, int button2);


  //! Sets the rectangle dimensions of this browser window using pixel coordinates.
  //
  // Param:  left    Left x-axis pixel coordinate.
  // Param:  top     Top y-axis pixel coordinate.
  // Param:  right   Right x-axis pixel coordinate.
  // Param:  bottom  Bottom y-axis pixel coordinate.
  //
  public native void SetWindowRect(int left, int top, int right, int bottom);

  //! Gets the location of the top of this browser window.
  //
  // Returns:
  //     Returns the location of the top of this browser window as a y-axis pixel coordinate.
  //
  public native int GetWindowTop(void);

  //! Gets the location of the left side of this browser window.
  //
  // Returns:
  //     Returns the location of the left side of this browser window as a x-axis pixel coordinate.
  //
  public native int GetWindowLeft(void);

  //! Gets the location of the right side of this browser window.
  //
  // Returns:
  //     Returns the location of the right side of this browser window as a x-axis pixel coordinate.
  //
  public native int GetWindowRight(void);

  //! Gets the location of the bottom of this browser window.
  //
  // Returns:
  //     Returns the location of the bottom of this browser window as a y-axis pixel coordinate.
  //
  public native int GetWindowBottom(void);

  //! Sets the position of the top of this browser window.
  //
  // Param:  top  Top y-axis pixel position.
  //
  public native void SetWindowTop(int top);

  //! Sets the position of the left side of this browser window.
  //
  // Param:  left  Left side x-axis pixel position.
  //
  public native void SetWindowLeft(int left);

  //! Sets the position of the right side of this browser window.
  //
  // Param:  right  Right side x-axis pixel position.
  //
  public native void SetWindowRight(int right);

  //! Sets the position of the bottom of this browser window.
  //
  // Param:  bottom  Bottom y-axis pixel position.
  //
  public native void SetWindowBottom(int bottom);

  //! Sets the width of this browser window.
  //
  // Param:  width  Width in pixels to set this browser window to.
  //
  public void SetWindowWidth(int width);

  //! Sets the height of this browser window.
  //
  // Param:  height  Height in pixels to set this browser window to.
  //
  public void SetWindowHeight(int height);

  //! Sets the height and width of this browser.
  //
  // Param:  width   Width in pixels to set this browser window to.
  // Param:  height  Height in pixels to set this browser window to.
  //
  public void SetWindowSize(int width, int height);

  //! Sets the window's screen position using pixel coordinates.
  //
  // Sets the position of the browser in pixel coordinates.  The top left corner of the browser is
  // where the position is set from.
  //
  // Param:  left  Position of the left side of the browser window (x-axis pixel coordinate).
  // Param:  top   Position of the top of the browser window (y-axis pixel coordinate).
  //
  public void SetWindowPosition(int left, int top);

  //! Resizes the window and positions it in the screen center
  //
  // Param:  width  New window width
  // Param:  height New window height
  //
  public void SetWindowCentered(int width, int height);

  //! Gets the width of this browser window in pixels.
  //
  // Returns:
  //     Returns the width of this browser window in pixels.
  //
  public int GetWindowWidth(void);

  //! Gets the height of this browser window in pixels.
  //
  // Returns:
  //     Returns the height of this browser window in pixels.
  //
  public int GetWindowHeight(void);


  //! Hides or shows this browser window.
  //
  // Param:  visible  If true, browser is shown, false to hide.
  //
  public native void SetWindowVisible(bool visible);

  //! Determines if this browser window is visible.
  //
  // Returns:
  //     Returns true if this browser window is visible, false otherwise.
  //
  public native bool GetWindowVisible(void);

  //! Determines if this browser window has been minimised.
  //
  // Returns:
  //     Returns true if this browser window is minimised, false otherwise.
  //
  // See Also: MinimiseWindow, RestoreWindow
  //
  public native bool IsWindowMinimised(void);

  //! Minimise a browser window.
  //
  // Param:  caption    the caption to display on the menu-bar.
  // Param:  tooltip    the tooltip to display for the restore button.
  //
  // See Also: RestoreWindow, IsWindowMinimised
  //
  public native void MinimiseWindow(string caption, string tooltip);

  //! Restore a browser window, has no effect if not minimised.
  //
  // See Also: MinimiseWindow, IsWindowMinimised
  //
  public native void RestoreWindow();


  //! Moves the window to a target position/size over time
  //
  public native void AnimateWindowTo(int left, int top, int right, int bottom, float time);


  //! Sets whether the browser should remember it's position after closing
  //
  // If called, once the window is closed it will save it's position to file.
  // Once set, calls to alter the window position, or reduce the window size,
  // will be ignored (window may grow in size). Default positionings should
  // therefore be set prior to calling this function.
  //
  // Param:  asset      Asset where images and other links can be found.
  // Param:  identifier Unique string to identify this window by.
  //
  public native void SetRememberPosition(Asset asset, string identifier);


  //! Sets the minimum and maximum sizes to which the user can resize this window to.
  //
  // Call this method after setting the window's size as that will lock the growth to the size of 
  // the window such that it can be shrunk but not expanded beyond its initial size.
  //
  // Param:  minWidth   Minimum window width in pixels.
  // Param:  minHeight  Minimum window height in pixels.
  // Param:  maxWidth   Maximum window width in pixels.
  // Param:  maxHeight  Maximum window height in pixels.
  //
  public native void SetWindowGrow(int minWidth, int minHeight, int maxWidth, int maxHeight);


  //! Gives the named element in this browser keyfocus
  //
  // This method is used to set the keyboard focus to a default element that is in the HTML
  // page this Browser is currently loaded with.
  //
  // An element in a HTML page is usually a something like a text entry box, dial or button defined
  // by a \ref html "<trainz-object>" tag.  Each element has multiple properties in it and this 
  // method allows those property items to be set by name.
  //
  // Param:  elementID   Name of element to give key focus.
  //                     Supports access to objects nested within 'browser' objects via chained
  //                     elementID's seperated by '/' characters (eg. "browser1/browser2/textbox")
  //
  // See Also:
  //     <l html  HTML Tags Reference>
  //
  public native void SetElementFocus(string elementID);


  //! Sets the property of the named element in this browser to the given value.
  //
  // This method is used to set the value of a property contained in an element that is in the HTML
  // page this Browser is currently loaded with.
  //
  // An element in a HTML page is usually a something like a text entry box, dial or button defined
  // by a \ref html "<trainz-object>" tag.  Each element has multiple properties in it and this 
  // method allows those property items to be set by name.
  //
  // Param:  elementID   Name of element to set a property of.  
  //                     Supports access to objects nested within 'browser' objects via chained
  //                     elementID's seperated by '/' characters (eg. "browser1/browser2/textbox")
  // Param:  propertyID  Property in the element to set.  Any property the \ref html "<trainz-object>"
  //                     tag supports can be used.
  // Param:  value       Value to set the property to.
  //
  // See Also:
  //     <l html  HTML Tags Reference>
  //
  public native void SetElementProperty(string elementID, string propertyID, string value);

  //! Gets the value of the specified property in the named element of this browser.
  //
  // Param:  elementID   Element to get a property value from.
  //                     Supports access to objects nested within 'browser' objects via chained
  //                     elementID's seperated by '/' characters (eg. "browser1/browser2/textbox")
  // Param:  propertyID  Property in the element to get the value of.
  //
  // Returns:
  //     Returns the value of the specified property value if it exists, null otherwise.
  //
  // See Also:
  //     <l html  HTML Tags Reference>
  //
  public native string GetElementProperty(string elementID, string propertyID);


  //! Sets the named %Trainz text item in this browser to the given string.
  //
  // %Trainz text is a way of providing updateable text in a HTML page without having to reload the
  // page.  Multiple %Trainz text items can be used in a single page and they are defined by using
  // the <b &lt;trainz-text&gt;> tag.  For example, the following HTML code defines the current 
  // speed of the train in Driver for the Speed and Time HUD panel:
  //
  //<code><trainz-text id="speed" text="0 kph"></trainz-text></code>
  //
  // The <b id> option of the tag is used to specify the name of the %Trainz text item while <b text>
  // is the default text displayed for the item that can be changed by this method.
  //
  // Param:  id    ID name of the %Trainz text item to set.
  // Param:  text  String to apply to the text item specified by <i id>.
  //
  // See Also:
  //     <l html  HTML Reference>
  //
  public native void SetTrainzText(string id, string text);


  //! Sets the property of the named object element in this browser to the given object.
  //
  // This method is used to assign an object value to the property contained in an element that is 
  // in the HTML page this Browser is currently loaded with.
  //
  // An element in a HTML page is usually a something like a text entry box, dial or button defined
  // by a \ref html "<trainz-object>" tag.  Each element has multiple properties in it and this 
  // method allows those property items to be set by name.
  //
  // Param:  elementID   Name of element to set the property of.
  // Param:  propertyID  Property in the element to set.  Properties the \ref html "<trainz-object>"
  //                     tag supports can be used.
  // Param:  value       Object the is the value the property will be assigned.
  //
  // See Also:
  //     <l html  HTML Reference>
  //
  public native void SetElementObjectProperty(string elementID, string propertyID, object value);


  //! Sets the window title.
  //
  // Param:  windowTitle   The new window title.
  //
  public native void SetWindowTitle(string windowTitle);


  //! Provides an interface to attract attention to this window.
  //
  //  This method is designed to be called when something has changed in a window
  //  that may interest the player. It will cause some visual effect to attract attention
  //  to the window. The actual effect may change between versions of Trainz.
  //  At the time of writing this function has no effect unless the dialog has been minimised
  //  in which case an asterix '*' is inserted in the caption of minimised dialog button.
  //
  public native void GetAttention();


  // Sets whether this dialog can be moved by click&drag on the background
  public native void SetMovableByDraggingBackground(bool enable);


  //! Brings this Browser window to the front of other browsers on the screen.
  public native void BringToFront(void);

  //! Defocuses input from this browser and returns the input focus to the game world
  public native void Defocus(void);

  //! Display a popup menu at the current mouse location within this browser.
  public native void PopupMenu(Menu menu);

  //! Resets the scroll bar to the top of the browser window
  public native void ResetScrollBar(void);

  //! Resizes the dialog height to fit the html (if possible)
  public native void ResizeHeightToFit(void);


  public void SetWindowWidth(int width)
  {
    SetWindowRight(GetWindowLeft() + width);
  }

  public void SetWindowHeight(int height)
  {
    SetWindowBottom(GetWindowTop() + height);
  }

  public void SetWindowSize(int width, int height)
  {
    SetWindowWidth(width);
    SetWindowHeight(height);
  }

  public void SetWindowPosition(int left, int top)
  {
    SetWindowLeft(left);
    SetWindowTop(top);
  }

  public void SetWindowCentered(int width, int height)
  {
    SetWindowRect(Interface.GetDisplayWidth() / 2 - width / 2,
                  Interface.GetDisplayHeight() / 2 - height / 2,
                  Interface.GetDisplayWidth() / 2 + width / 2,
                  Interface.GetDisplayHeight() / 2 + height / 2);
  }

  public int GetWindowWidth(void)
  {
    return GetWindowRight() - GetWindowLeft();
  }

  public int GetWindowHeight(void)
  {
    return GetWindowBottom() - GetWindowTop();
  }

  public void ToggleWindowVisible(void)
  {
    if (Interface.GetInterfaceVisible())
      SetWindowVisible(!GetWindowVisible());
  }

};



//=============================================================================
// Name: BrowserInterface
// Desc: Static interface used to create browsers
//=============================================================================
final static class BrowserInterface isclass GameObject
{
  //! Deprecated, use Constructors::NewBrowser() instead.
  public native Browser CreateBrowser(void);


  //=============================================================================
  // Name: Quote
  // Desc: Escapes any HTML characters in the the given string.
  //=============================================================================
  public native string Quote(string a_str);


  //=============================================================================
  // Name: MaskProfanity
  // Desc: Searches the string passed for obscene langauge and replaces it with a
  //       string of non-alphanumeric characters ($@!). It is good practice to
  //       run this function over any player entered text that is visible to 
  //      other players. For example, chat text, multiplayer game listings, etc.
  //=============================================================================
  public native string MaskProfanity(string s);


  //=============================================================================
  // Name: SetOverlayColor
  // Desc: Creates an overlay over the world view and transitions to it over the
  //       given time. Does not affect UI rendering. Useful for fading out the
  //       world at the end of sessions, etc.
  // Note: In TRS19, this function has no effect outside of cut-scene mode, and
  //       defaults are automatically reset when leaving cut-scene mode.
  //=============================================================================
  public native void SetOverlayColor(float red, float green, float blue, float alpha, float fadeTime);


  //=============================================================================
  // Name: FadeScreen
  // Desc: Creates an overlay over the world view and transitions to it and back
  //       again over the given time. Does not affect UI rendering. Useful for
  //       providing scene transitions, etc.
  //=============================================================================
  public void FadeScreen(GameObject runningThread, float red, float green, float blue, float alpha, float time)
  {
    SetOverlayColor(red, green, blue, alpha, time / 3);
    runningThread.Sleep(time * 2 / 3);
    SetOverlayColor(red, green, blue, 0, time / 3);
  }


  // OBSOLETE - Save support is mandatory
  public obsolete void SetSaveAllowed(bool saveAllowed) { }


};

